
)
# find the percentage the member agreed with a vote
votes_info <- fromJSON(votes_info_body)$results
expanded_votes_info <- votes_info$votes %>%
as.data.frame() %>%
flatten() %>%
select(position, result)
percentage_agreed <- round(nrow(filter(
expanded_votes_info, position == "Yes" & result == "Passed" |
position == "No" & result == "Failed"
)) / nrow(expanded_votes_info) * 100)
lintr:::addin_lint()
#Source in relevant scripts
source("civic-info.R")
source("propublica.R")
# Load the knitr library
library(knitr)
#Display simple dataframe from civic api info
kable(full_table)
#Create simple bar plots from sourced information
#barplot(main = "Representatives by Gender", xlab = "# of Representatives",
#horiz = TRUE, c(nrow(pro_results) - females, females),
#names.arg = c("Males", "Females"))
#barplot(main = "Representatives by Party", xlab = "# of Representatives",
#horiz = TRUE, c(nrow(pro_results) - democrats, democrats),
#names.arg = c("Republicans", "Democrats"))
reps_by_gen
reps_by_party
# set-up
library("httr")
library(jsonlite)
source("api-keys.R")
source("civic-info.R")
# set up for query full endpoint
state <- civic_parsed_data$normalizedInput$state
chamber <- "house"
# create endpoint
pro_resource <- "/members"
pro_base_url <- "https://api.propublica.org/congress/v1"
pro_endpoint <- paste0(
pro_base_url, pro_resource, "/",
chamber, "/", state, "/current.json"
)
# MakeGET request
pro_response <- GET(pro_endpoint, add_headers("X-API-Key" = pro_apikey))
# Extraxt content from response
pro_body <- content(pro_response, "text")
pro_parsed_data <- fromJSON(pro_body)
# set up barplots to show in index
pro_results <- pro_parsed_data$results
females <- filter(pro_results, gender == "F") %>% nrow()
democrats <- filter(pro_results, party == "D") %>% nrow()
# setup for specified member endpoint and votes endpoint
library(eeptools)
member <- pro_results[1, 1]
# create endpoints for member and member votes information
mem_info_endpoint <- paste0(pro_base_url, pro_resource, "/", member, ".json")
votes_info_endpoint <- paste0(
pro_base_url, pro_resource, "/", member,
"/votes.json"
)
# MakeGET requests
mem_info_response <- GET(
mem_info_endpoint,
add_headers("X-API-Key" = pro_apikey)
)
votes_info_response <- GET(
votes_info_endpoint,
add_headers("X-API-Key" = pro_apikey)
)
# Extraxt contents from responses
mem_info_body <- content(mem_info_response, "text")
votes_info_body <- content(votes_info_response, "text")
mem_info <- fromJSON(mem_info_body)$results
# specify member age and twitter account for use in index
mem_age <- floor(age_calc(as.Date(mem_info$date_of_birth),
Sys.Date(),
units = "years"
))
mem_info$twitter_account <- paste0(
"[", mem_info$twitter_account, "]
(https://www.twitter.com/",
mem_info$twitter_account, ")"
)
# find the percentage the member agreed with a vote
votes_info <- fromJSON(votes_info_body)$results
expanded_votes_info <- votes_info$votes %>%
as.data.frame() %>%
flatten() %>%
select(position, result)
percentage_agreed <- round(nrow(filter(
expanded_votes_info, position == "Yes" & result == "Passed" |
position == "No" & result == "Failed"
)) / nrow(expanded_votes_info) * 100)
barplot(main = "Representatives by Gender", xlab = "# of Representatives",
horiz = TRUE, c(nrow(pro_results) - females, females),
names.arg = c("Males", "Females"))
barplot(main = "Representatives by Party", xlab = "# of Representatives",
horiz = TRUE, c(nrow(pro_results) - democrats, democrats),
names.arg = c("Republicans", "Democrats"))
# set-up
library("httr")
library(jsonlite)
source("api-keys.R")
source("civic-info.R")
# set up for query full endpoint
state <- civic_parsed_data$normalizedInput$state
chamber <- "house"
# create endpoint
pro_resource <- "/members"
pro_base_url <- "https://api.propublica.org/congress/v1"
pro_endpoint <- paste0(
pro_base_url, pro_resource, "/",
chamber, "/", state, "/current.json"
)
# MakeGET request
pro_response <- GET(pro_endpoint, add_headers("X-API-Key" = pro_apikey))
# Extraxt content from response
pro_body <- content(pro_response, "text")
pro_parsed_data <- fromJSON(pro_body)
# set up barplots to show in index
pro_results <- pro_parsed_data$results
females <- filter(pro_results, gender == "F") %>% nrow()
democrats <- filter(pro_results, party == "D") %>% nrow()
# setup for specified member endpoint and votes endpoint
library(eeptools)
member <- pro_results[1, 1]
# create endpoints for member and member votes information
mem_info_endpoint <- paste0(pro_base_url, pro_resource, "/", member, ".json")
votes_info_endpoint <- paste0(
pro_base_url, pro_resource, "/", member,
"/votes.json"
)
# MakeGET requests
mem_info_response <- GET(
mem_info_endpoint,
add_headers("X-API-Key" = pro_apikey)
)
votes_info_response <- GET(
votes_info_endpoint,
add_headers("X-API-Key" = pro_apikey)
)
# Extraxt contents from responses
mem_info_body <- content(mem_info_response, "text")
votes_info_body <- content(votes_info_response, "text")
mem_info <- fromJSON(mem_info_body)$results
# specify member age and twitter account for use in index
mem_age <- floor(age_calc(as.Date(mem_info$date_of_birth),
Sys.Date(),
units = "years"
))
mem_info$twitter_account <- paste0(
"[", mem_info$twitter_account, "](https://www.twitter.com/",
mem_info$twitter_account, ")"
)
# find the percentage the member agreed with a vote
votes_info <- fromJSON(votes_info_body)$results
expanded_votes_info <- votes_info$votes %>%
as.data.frame() %>%
flatten() %>%
select(position, result)
percentage_agreed <- round(nrow(filter(
expanded_votes_info, position == "Yes" & result == "Passed" |
position == "No" & result == "Failed"
)) / nrow(expanded_votes_info) * 100)
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
# Exercise 1: Building a user interface
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage(
# A top level header: "First Shiny Website"
h1("First Shiny Website"),
# A Paragraph, describing your excitement: include some `strong` text
p(
"This is my", strong("first"), "shiny project, and I feel..."
),
# An image with this `src`
# https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif
img(
"",
src = "https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif"
),
# Another paragraph about a slider: include some `em` text
p("I can't wait to get", em("sliders"), "like these to work."),
# A slider with an appropriate label, min of 10, max of 100, value of 50
sliderInput(
"slider",
"My First Slider", min = 0, max = 100, value = 50, step = 10
)
)
# Define a `server` function that accepts an input and an output
# At this point, don't do anything in the function
# This function should perform the following:
server <- function(input, output) {
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
library(httr)
library(jsonlite)
call <- paste0("https://traffic.cit.api.here.com/traffic/6.2/incidents.json?app_id=3XM2tXG9AcbdYGZSYQrN&app_code=HRqp1gOmX1YOMRjUs4_o9Q&bbox=52.516,13.355;52.511,13.400")
get <- GET(call)
class(get_tweets)
class(get)
get_info <- content(get, "text")  # Convert to "character"
traffic_data <- fromJSON(get_info, flatten = TRUE) # Flatten into list
View(traffic_data)
class(traffic_data)
traffic_data <- fromJSON(get_info, flatten = TRUE) # Flatten into list
class(traffic_data)
## Process into a data table
get_info <- content(get, "text")  # Convert to "character"
class(get_info)
print(get_info)
names(traffic_data)
View(traffic_data$TIMESTAMP)
View(traffic_data$VERSION)
View(traffic_data$TRAFFIC_ITEMS)
View(traffic_data$TRAFFIC_ITEMS$TRAFFIC_ITEM)
View(traffic_data$diagnostic)
call <- paste0("https://traffic.cit.api.here.com/traffic/6.2/flow.json?app_id=3XM2tXG9AcbdYGZSYQrN&app_code=HRqp1gOmX1YOMRjUs4_o9Q&bbox=52.516,13.355;52.511,13.400")
get <- GET(call)
class(get)
## Process into a data table
get_info <- content(get, "text")  # Convert to "character"
traffic_data <- fromJSON(get_info, flatten = TRUE) # Flatten into list
names(traffic_data)
View(traffic_data$RWS)
View(traffic_data$MAP_VERSION)
View(traffic_data$VERSION)
View(traffic_data$UNITS)
View(traffic_data)
library(httr)
library(jsonlite)
call <- paste0("https://traffic.cit.api.here.com/traffic/6.2/incident.json?app_id=3XM2tXG9AcbdYGZSYQrN&app_code=HRqp1gOmX1YOMRjUs4_o9Q&bbox=52.516,13.355;52.511,13.400")
get <- GET(call)
class(get)
## Process into a data table
get_info <- content(get, "text")  # Convert to "character"
traffic_data <- fromJSON(get_info, flatten = TRUE) # Flatten into list
View(traffic_data$TRAFFIC_ITEMS$TRAFFIC_ITEM)
# Setup
library(httr)
library(jsonlite)
library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(wordcloud2)
library("tm")
library("SnowballC")
library("RColorBrewer")
source("script/api-key.R")
# Define the server
base     <- "https://rest.coinapi.io/"
endpoint <- "/v1/twitter/latest?"
api_key  <- paste0("apikey=", api)
## Create
call <- paste0(base, endpoint, api_key)
# call
## Retrieve data via GET call
get_tweets <- GET(call)
## Returns class "response"
class(get_tweets)
## Process into a data table
get_tweets_text <- content(get_tweets, "text")  # Convert to "character"
twitter_data <- fromJSON(get_tweets_text, flatten = TRUE) # Flatten into list
tweets <- twitter_data %>%
select(text)
text <- ""
for (row in 1:100) {
text <- paste(text, tweets[row,])
}
data <- Corpus(VectorSource(text))
#inspect(data)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
data <- tm_map(data, toSpace, " ' ")
# Convert the text to lower case
data <- tm_map(data, content_transformer(tolower))
# Remove numbers
data <- tm_map(data, removeNumbers)
# Remove english common stopwords
data <- tm_map(data, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
data <- tm_map(data, removeWords, c("RT", "@"))
# Remove punctuations
data <- tm_map(data, removePunctuation)
# Eliminate extra white spaces
data <- tm_map(data, stripWhitespace)
dtm <- TermDocumentMatrix(data)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
for (row in 1:nrow(d)) {
if(grepl("???", d[row,1]) || grepl("â", d[row,1]) || grepl("S", d[row,1]) || grepl("ç", d[row,1]) || grepl("Y", d[row,1]) || grepl("æ", d[row,1]) || grepl("https", d[row,1])) {
d <- d[-row,]
}
}
#output$max_freq <- reactive({
# max(d$freq)
#})
server <- function(input, output) {
output$plot <- renderPlot({
wordcloud(words = d$word, freq = d$freq, min.freq = 3,
max.words=350, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
# Call the server
shinyServer(server)
setwd("C:/Users/Dayoung Cheong/Desktop/INFO-201-Final-Project-AD5")
# Setup
library(httr)
library(jsonlite)
library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(wordcloud2)
library("tm")
library("SnowballC")
library("RColorBrewer")
source("script/api-key.R")
# Define the server

names <- c("Dinghao", "Will", "Willian")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n + 1
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
new vector <- n - m
# Subtract `m` FROM `n`. Note the recycling!
new vec <- n - m
# Subtract `m` FROM `n`. Note the recycling!
new_vector <- n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(21:30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_number <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
test <- all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 7, 6, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- prefix[1:3]
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[c(TRUE, FALSE)] <- 0
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("I", "am", "the", "best", "programmer", "in", "the", "universe")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste("'", words, "' is the word of the day")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste0("'", words, "' is the word of the day")
words_of_the_day
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[substring(words, 1, 1) <= f]
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[substring(words, 1, 1) <= "f"]
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[substr(words, 1, 1) <= "f"]
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words >= "g" & substr(words, 1, 1) < "m"]
word_bin <- function(vector, letter_1, letter_2) {
new_vector <- words[words >= letter_1 & substr(words, 1, 1) <= letter_2]
return(new_vector)
}
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, "e", "q")
install.packages(styler)
install.packages("styler")
install.packages(""lintr"")
install.packages("lintr")
library(styler)
library(lintr)
install.packages("lintr")
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("chocolate bar", "milk")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("rice", "chicken", "tofu stir-fry")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("salad")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast"]
print(early_meals)
early_meals <-meals["1:2"]
print(early_meals)
early_meals <- [1:2]
early_meals <- meals[1:2]
print(early_meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number <- lapply(meals, length)
add_pizza <- function(meal) {
meal <- c(meal, pizza)
meal
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- add_pizza(meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
add_pizza <- function(meal) {
meal <- c(meal, "pizza")
meal
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
print(better_meals)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(9, 12, 27, 46)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores <- c(9, 12, 27, 46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
allowed_score <- c(17, 9, 33, 18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(scores, allowed_score)
View games
View(games)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- abs(games$scores - games$allowed_score)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$scores - games$allowed_score
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Packers", "49ers", "Titans", "Colts")
# Assign your dataframe rownames of their opponents
rownames(games) <- opponents
# View your data frame to see how it has changed!
View(games)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employee <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaies <- data.frame(employee, salaries_2017, salaries_2018, stringsAsFactors = F)
View(salaies)
View(salaies)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employee, salaries_2017, salaries_2018, stringsAsFactors = F)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries_2018 - salaries_2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
install.packages("dplyr")
install.packages("shiny")
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-1')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-1')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-1')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-1')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-1')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-1')
shiny::runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-3')
### Exercise 3 ###
library(shiny)
library(ggplot2)
# Create a shiny server that creates a scatterplot.
shinyServer(function(input, output) {
output$scatter <- renderPlot({
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
# Store x and y values to plot
x <- mpg[[input$x_ver]]
y <- mpg[[input$y_ver]]
# Store the title of the graph in a variable
title <- paste0("MPG dataset: ", input$x_ver, "vs ", input$y_ver)
# Create ggplot scatter
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y),
size = input$size,
color = input$color) +
labs(x = input$x_ver, y = input$y_ver, title = title)
p
})
})
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/ch16-shiny/exercise-3')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/web-materials/exercise-1')
# Setup
library(dplyr)
library(ggplot2)
midwest
View(midwest)
shiny::runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
?midwest
shiny::runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
shiny::runApp('C:/Users/Dinghao Xu/Desktop/Info 201/web-materials/exercise-1')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/web-materials/exercise-1')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='dinghaoxu',
token='B29A96D07E3F808B9E4493415BBFC66C',
secret='<SECRET>')
rsconnect::setAccountInfo(name='dinghaoxu',
token='B29A96D07E3F808B9E4493415BBFC66C',
secret='<SECRET>')
rsconnect::setAccountInfo(name='dinghaoxu',
token='B29A96D07E3F808B9E4493415BBFC66C',
secret='6BX6mCUShV/Kdze75aaC62RMPET5kEAD+aOS3+OE')
api <- "14B129FD-70D9-4872-9BFD-9131FDAFD714"
ibrary(httr)
library(jsonlite)
source("api-key.R")
## I got a free account at coinapi.io
## Free account provides 100 daily requests free.
## The next tier allows 1000 daily requests for US$79/month

base     <- "https://rest.coinapi.io/"
endpoint <- "/v1/twitter/latest?"
api_key  <- paste0("apikey=", api)
## Create
call <- paste0(base, endpoint, api_key)

print(call)

# call
## Retrieve data via GET call
get_tweets <- GET(call)
## Returns class "response"
class(get_tweets)
## Process into a data table
get_tweets_text <- content(get_tweets, "text")  # Convert to "character"
<<<<<<< HEAD
twitter_data <- fromJSON(get_tweets_text, flatten = TRUE) # Flatten into list
tweets <- twitter_data %>%
select(text)
text <- ""
for (row in 1:100) {
text <- paste(text, tweets[row,])
}
data <- Corpus(VectorSource(text))
#inspect(data)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
data <- tm_map(data, toSpace, " ' ")
# Convert the text to lower case
data <- tm_map(data, content_transformer(tolower))
# Remove numbers
data <- tm_map(data, removeNumbers)
# Remove english common stopwords
data <- tm_map(data, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
data <- tm_map(data, removeWords, c("RT", "@"))
# Remove punctuations
data <- tm_map(data, removePunctuation)
# Eliminate extra white spaces
data <- tm_map(data, stripWhitespace)
dtm <- TermDocumentMatrix(data)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
for (row in 1:nrow(d)) {
if(grepl("???", d[row,1]) || grepl("â", d[row,1]) || grepl("S", d[row,1]) || grepl("ç", d[row,1]) || grepl("Y", d[row,1]) || grepl("æ", d[row,1]) || grepl("https", d[row,1])) {
d <- d[-row,]
}
}
#output$max_freq <- reactive({
# max(d$freq)
#})
server <- function(input, output) {
output$plot <- renderPlot({
wordcloud(words = d$word, freq = d$freq, min.freq = 3,
max.words=350, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
# Call the server
shinyServer(server)
wordcloud(words = d$word, freq = d$freq, min.freq = 3,
max.words=350, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
library(wordcloud)
wordcloud(words = d$word, freq = d$freq, min.freq = 3,
max.words=350, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
# Setup
library(httr)
library(jsonlite)
library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(wordcloud)
library("tm")
library("SnowballC")
library("RColorBrewer")
source("script/api-key.R")
# Define the server

get_tweets_json <- fromJSON(get_tweets_text, flatten = TRUE) # Flatten into list
library(httr)
library(jsonlite)
source("api-key.R")
## I got a free account at coinapi.io
## Free account provides 100 daily requests free.
## The next tier allows 1000 daily requests for US$79/month

base     <- "https://rest.coinapi.io/"
endpoint <- "/v1/twitter/latest?"
api_key  <- paste0("apikey=", api)
## Create
call <- paste0(base, endpoint, api_key)

print(call)

# call
## Retrieve data via GET call
get_tweets <- GET(call)
## Returns class "response"
class(get_tweets)
## Process into a data table
get_tweets_text <- content(get_tweets, "text")  # Convert to "character"
<<<<<<< HEAD
twitter_data <- fromJSON(get_tweets_text, flatten = TRUE) # Flatten into list
tweets <- twitter_data %>%
select(text)
text <- ""
for (row in 1:100) {
text <- paste(text, tweets[row,])
}
data <- Corpus(VectorSource(text))
#inspect(data)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
data <- tm_map(data, toSpace, " ' ")
# Convert the text to lower case
data <- tm_map(data, content_transformer(tolower))
# Remove numbers
data <- tm_map(data, removeNumbers)
# Remove english common stopwords
data <- tm_map(data, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
data <- tm_map(data, removeWords, c("RT", "@"))
# Remove punctuations
data <- tm_map(data, removePunctuation)
# Eliminate extra white spaces
data <- tm_map(data, stripWhitespace)
dtm <- TermDocumentMatrix(data)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
for (row in 1:nrow(d)) {
if(grepl("???", d[row,1]) || grepl("â", d[row,1]) || grepl("S", d[row,1]) || grepl("ç", d[row,1]) || grepl("Y", d[row,1]) || grepl("æ", d[row,1]) || grepl("https", d[row,1])) {
d <- d[-row,]
}
}
#output$max_freq <- reactive({
# max(d$freq)
#})
server <- function(input, output) {
output$plot <- renderPlot({
wordcloud(words = d$word, freq = d$freq, min.freq = 3,
max.words=350, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
# Call the server
#shinyServer(server)
d
base     <- "https://rest.coinapi.io/"
endpoint <- "/v1/twitter/latest?"
api_key  <- paste0("apikey=", api)
source("script/api-key.R")
api_key  <- paste0("apikey=", api)
## Create
call <- paste0(base, endpoint, api_key)
# call
## Retrieve data via GET call
get_tweets <- GET(call)
## Returns class "response"
class(get_tweets)
## Process into a data table
get_tweets_text <- content(get_tweets, "text")  # Convert to "character"
## Process into a data table
get_tweets_text <- content(get_tweets, "text")  # Convert to "character"
library(httr)
library(jsonlite)

get_tweets_json <- fromJSON(get_tweets_text, flatten = TRUE) # Flatten into list
View(get_tweets_json)
shiny::runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/a8-shiny-DinghaoXu')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
install.packages("crypto", dependencies = TRUE)
install.packages("crypto", dependencies = TRUE)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("httr")
install.packages("jsonlite")
install.packages("plotly")
install.packages("lintr")
install.packages("styler")
install.packages("devtools")
devtools::install_github("jimhester/lintr")
devtools::install_github("jimhester/lintr")
install.packages("shiny")
install.packages("shinythemes")
install.packages("crypto", dependencies = TRUE)
library(crypto)
install.packages("foreach")
install.packages("foreach")
install.packages(rvest)
install.packages("rvest")
install.packages("xml2")
library(crypto)
library(foreach)
library(rvest)
library(xml2)
library(crypto)
getCoins(coin = bitcoin)
listCoins()
getCoins(coin = "Bitcoin")
library(foreach)
library(rvest)
library(xml2)
library(crypto)
?getCoins
listCoins()
getCoins()
library(foreach)
library(rvest)
library(xml2)
library(crypto)
listCoins()
getCoins(coin = "Bitcoin", start_date = "20180101", end_date = "20180102")
library(foreach)
library(rvest)
library(xml2)
library(crypto)
getCoins(coin = "Bitcoin", start_date = "20180101", end_date = "20180102", limit = 5)
# Setup

library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)

library(wordcloud)
library("tm")
library("SnowballC")
library("RColorBrewer")
source("script/api-key.R")
base     <- "https://rest.coinapi.io/"
endpoint <- "/v1/twitter/latest?"
api_key  <- paste0("apikey=", api)
## Create
call <- paste0(base, endpoint, api_key)
# call
## Retrieve data via GET call
get_tweets <- GET(call)
## Returns class "response"
class(get_tweets)
## Process into a data table
get_tweets_text <- content(get_tweets, "text")  # Convert to "character"
?content
## Process into a data table
get_tweets_text <- content(get_tweets, type = "text")  # Convert to "character"
## Process into a data table
get_tweets_text <- content(get_tweets, "text")  # Convert to "character"
twitter_data <- fromJSON(get_tweets_text, flatten = TRUE) # Flatten into list

library(ggthemes)
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
shiny::runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
?observeEvent
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')
runApp('C:/Users/Dinghao Xu/Desktop/Info 201/INFO-201-Final-Project-AD5')

