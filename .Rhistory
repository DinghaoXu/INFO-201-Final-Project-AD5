labs(title = title, x = "Exchange Rate", y = "Date") +
theme_solarized()
p
})
output$ets_plot <- renderPlot({
ets_plot
})
output$holt_plot <- renderPlot({
holt_plot
})
output$arima_plot <- renderPlot({
arima_plot
})
output$bayesian_plot <- renderPlot({
bayesian_plot
})
output$plot <- renderPlot({
wordcloud(words = d$word, freq = d$freq, min.freq = 3,
max.words=350, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
# Call the server
shinyServer(server)
}
runApp()
install.packages("smooth")
#install.packages("twitteR")
#install.packages("RCurl")
library(RCurl)
library(twitteR)
library(httr)
library(jsonlite)
library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(ggthemes)
library("wordcloud")
library("tm")
library("SnowballC")
library("RColorBrewer")
source("script/api-key.R")
source("script/functions.R")
source("script/forecast.R")
# Change the next four lines based on your own consumer_key, consume_secret, access_token, and access_secret.
consumer_key <- api_consumer_key
consumer_secret <- api_consumer_secret
access_token <- api_access_token
access_secret <- api_access_secret
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
tw = twitteR::searchTwitter('#bitcoin', n=300, lang = "en")
tweets = twitteR::twListToDF(tw)
text <- ""
for (row in 1:1000) {
text <- paste(text, tweets[row,])
}
data <- Corpus(VectorSource(text))
#inspect(data)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
data <- tm_map(data, toSpace, " ' ")
# Convert the text to lower case
data <- tm_map(data, content_transformer(tolower))
# Remove numbers
data <- tm_map(data, removeNumbers)
# Remove english common stopwords
data <- tm_map(data, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
data <- tm_map(data, removeWords, c("RT", "@"))
# Remove punctuations
data <- tm_map(data, removePunctuation)
# Eliminate extra white spaces
data <- tm_map(data, stripWhitespace)
dtm <- TermDocumentMatrix(data)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
for (row in 1:nrow(d)) {
if(grepl("true", d[row,1]) || grepl("false", d[row,1]) || grepl("http", d[row,1]) || grepl("href", d[row,1]) || grepl("twitter", d[row,1]) || grepl("web", d[row,1]) || grepl("client", d[row,1])) {
d <- d[-row,]
}
}
for (row in 1:nrow(d)) {
if(grepl("true", d[row,1]) || grepl("false", d[row,1]) || grepl("http", d[row,1]) || grepl("href", d[row,1]) || grepl("twitter", d[row,1]) || grepl("web", d[row,1]) || grepl("client", d[row,1])) {
d <- d[-row,]
}
}
#output$max_freq <- reactive({
#max(d$freq)
#})
#ALL FOR DISPLAYING TWEETS
#display <- select(twitter_data, user.profile_image_url, text, created_at, user.followers_count)
#Change column names
#colnames(display) <- c("Profile_Picture", "Tweet", "Date_and_Time", "Followers")
# Change photo and email to correct format to show in index
#display$Profile_Picture <- paste0("![](", display$Profile_Picture, ")")
#display[display$Profile_Picture == "![](NA)", "Profile_Picture"] <- "Not available"
#display <- filter(display, is.na(Tweet) == FALSE)
#require("tm")
#removeWords("+0000",display$Date_and_Time)
#formatted <- kable(display)
# Define the server
server <- function(input, output) {
output$crptoline_1 <- renderPlot({
coin_history_wanted_1 <- coin_history %>%
filter(Currency == input$crypto_1) %>%
filter(year == input$time_year) %>%
filter(month == input$time_month)
title <- paste0(input$crypto_1, " in ", input$time_month, ", ", input$time_year)
x <- coin_history_wanted_1$day
y <- coin_history_wanted_1$average
p <- ggplot() +
geom_line(mapping = aes(x = x, y = y), color = "blue") +
labs(title = title, x = "Date", y = "Exchange Rate") +
theme_solarized()
p
})
output$cryptoline_2 <- renderPlot({
coin_history_wanted_2 <- coin_history %>%
filter(Currency == input$crypto_2) %>%
filter(year == input$time_year) %>%
filter(month == input$time_month)
title <- paste0(input$crypto_2, " in ", input$time_month, ", ", input$time_year)
x <- coin_history_wanted_2$average
y <- coin_history_wanted_2$day
p <- ggplot() +
geom_line(mapping = aes(x = x, y = y), color = "green") +
labs(title = title, x = "Exchange Rate", y = "Date") +
theme_solarized()
p
})
output$ets_plot <- renderPlot({
ets_plot
})
output$holt_plot <- renderPlot({
holt_plot
})
output$arima_plot <- renderPlot({
arima_plot
})
output$bayesian_plot <- renderPlot({
bayesian_plot
})
output$plot <- renderPlot({
wordcloud(words = d$word, freq = d$freq, min.freq = 3,
max.words=350, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
# Call the server
shinyServer(server)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Setup
library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(wordcloud)
library("tm")
library("SnowballC")
library("RColorBrewer")
# Define the ui
ui <- navbarPage(
theme = shinytheme("readable"),
tags$link(rel = "stylesheet", type = "text/css", href = "style.css"),
tabPanel("Introduction"),
titlePanel("KOYN"),
mainPanel(
h1("Everything you need to know to be on top of your coin.", align = "center"),
img(src='https://goo.gl/images/ZQQiZQ', alt = "blockchain"),
p("KOYN is an", em("interactive"), "outlet for you to learn not
only basic information regarding your coin, but also deeper
insights and comparisons to support you in your investments.
The data is provided by", a("Twitter", href = 'https://developer.twitter.com/en/docs.html'),
"and by user", a("pmohun", href = 'https://www.kaggle.com/philmohun/cryptocurrency-financial-data'),
"on Kaggle, which we rendered based on", em("common demands"), "we saw in our user research.
KOYN provides three main functionalities-- an
illustration of", strong("coin volatility"), ", a live twitter feed for",
strong("updated news"), ", and a", strong("prediction model"), "for your coin."),
h3("Knowing your coin is essential for successful investments.
We make your coin make sense.", align = "center")
),
tabPanel("Coin volatility",
titlePanel("Coin Volatility"),
sidebarLayout(
sidebarPanel(
tags$h2("Choose the types of cryptocurrency you want to compare"),
textInput(
"crypto_1",
label = "First cryptocurrency"
),
textInput(
"crypto_2",
label = "Second cryptocurrency"
),
selectInput(
"time_year",
label = "Year",
choices = c("2014", "2015", "2016", "2017", "2018")
),
selectInput(
"time_month",
label = "Month",
choices = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
"Aug", "Sep", "Oct", "Nov", "Dec")
)
),
mainPanel(
tags$h3("Here is the first plot"),
plotOutput("crptoline_1"),
tags$h3("Here is the second plot"),
plotOutput("cryptoline_2")
)
)
),
tabPanel(
"Twitter",
titlePanel(
sidebarLayout(
sidebarPanel(
sliderInput(
"min_freq_slider",
label = h3("Minimum Frequency:"), min = 0,
max = 6, value = 2
)
),
# Main panel which displays barplot
mainPanel(
plotOutput("plot", width = "100%")
)))),
tabPanel("Holt's Forecasting Model:",
plotOutput("holt_plot")),
tabPanel("Exponential Triple Smoothing Model:",
plotOutput("ets_plot")),
tabPanel("ARIMA Forecasting Model:",
plotOutput("arima_plot")),
tabPanel("Bayesian Forecasting Model:",
plotOutput("bayesian_plot")),
tabPanel("Feedback",
titlePanel("Your Feedbacks"),
sliderInput(
"feedback_1",
label = "1. Overall, how would you rate our app ?",
min = 0, max = 10, value = 5
),
sliderInput(
"feedback_2",
label = "2. How would you rate the layout of the app ?",
min = 0, max = 10, value = 5
),
sliderInput(
"feedback_3",
label = "3. How would you rate the usability of the app ?",
min = 0, max = 10, value = 5
),
textInput(
"feedback_4",
label = "4. Please give us some advices about the part we can improve on"
),
actionButton(
"feedback_submit",
label = "submit"
)
)
)
# Call the ui
shinyUI(ui)
runApp()
runApp()
runApp()
# Define the ui
ui <- navbarPage(
theme = shinytheme("readable"),
tags$link(rel = "stylesheet", type = "text/css", href = "style.css"),
tabPanel("Introduction"),
titlePanel("KOYN"),
mainPanel(
h1("Everything you need to know to be on top of your coin.",
align = "center"),
img(src='https://goo.gl/images/ZQQiZQ', alt = "blockchain"),
p("KOYN is an", em("interactive"), "outlet for you to learn not
only basic information regarding your coin, but also deeper
insights and comparisons to support you in your investments.
The data is provided by", a("Twitter", href =
'https://developer.twitter.com/en/docs.html'),"and by user",
a("pmohun", href =
'https://www.kaggle.com/philmohun/cryptocurrency-financial-data'),
"on Kaggle, which we rendered based on", em("common demands"),
"we saw in our user research.KOYN provides three main
functionalities-- an illustration of", strong("coin volatility"),
", a live twitter feed for",strong("updated news"), ", and a",
strong("prediction model"), "for your coin."),
h3("Knowing your coin is essential for successful investments.
We make your coin make sense.", align = "center")
),
tabPanel("Coin volatility",
titlePanel("Coin Volatility"),
sidebarLayout(
sidebarPanel(
tags$h2("Choose the types of cryptocurrency you want to compare"),
textInput(
"crypto_1",
label = "First cryptocurrency"
),
textInput(
"crypto_2",
label = "Second cryptocurrency"
),
selectInput(
"time_year",
label = "Year",
choices = c("2014", "2015", "2016", "2017", "2018")
),
selectInput(
"time_month",
label = "Month",
choices = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
"Aug", "Sep", "Oct", "Nov", "Dec")
)
),
mainPanel(
tags$h3("Here is the first plot"),
plotOutput("crptoline_1"),
tags$h3("Here is the second plot"),
plotOutput("cryptoline_2")
)
)
),
tabPanel(
"Twitter",
titlePanel(
sidebarLayout(
sidebarPanel(
sliderInput(
"min_freq_slider",
label = h3("Minimum Frequency:"), min = 0,
max = 6, value = 2
)
),
# Main panel which displays barplot
mainPanel(
plotOutput("plot", width = "200%", height = "200%")
)))),
tabPanel("Holt's Forecasting Model:",
mainPanel(
plotOutput("holt_plot"))),
tabPanel("Exponential Triple Smoothing Model:",
mainPanel(
plotOutput("ets_plot"))),
tabPanel("ARIMA Forecasting Model:",
plotOutput("arima_plot")),
tabPanel("Bayesian Forecasting Model:",
plotOutput("bayesian_plot")),
tabPanel("Feedback",
titlePanel("Your Feedbacks"),
sliderInput(
"feedback_1",
label = "1. Overall, how would you rate our app ?",
min = 0, max = 10, value = 5
),
sliderInput(
"feedback_2",
label = "2. How would you rate the layout of the app ?",
min = 0, max = 10, value = 5
),
sliderInput(
"feedback_3",
label = "3. How would you rate the usability of the app ?",
min = 0, max = 10, value = 5
),
textInput(
"feedback_4",
label = "4. Please give us some advices about the part we can improve on"
),
actionButton(
"feedback_submit",
label = "submit"
)
)
)
runApp()
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
#install.packages("twitteR")
#install.packages("RCurl")
library(RCurl)
library(twitteR)
library(httr)
library(jsonlite)
library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(ggthemes)
library("wordcloud")
library("tm")
library("SnowballC")
library("RColorBrewer")
library(DT)
source("script/api-key.R")
source("script/functions.R")
source("script/forecast.R")
# Define the server
server <- function(input, output) {
output$crptoline_1 <- renderPlot({
coin_history_wanted_1 <- coin_history %>%
filter(Currency == input$crypto_1) %>%
filter(year == input$time_year) %>%
filter(month == input$time_month)
title <- paste0(input$crypto_1, " in ", input$time_month, ", ", input$time_year)
x <- coin_history_wanted_1$day
y <- coin_history_wanted_1$average
p <- ggplot() +
geom_line(mapping = aes(x = x, y = y), color = "blue") +
labs(title = title, x = "Date", y = "Exchange Rate") +
theme_solarized()
p
})
output$cryptoline_2 <- renderPlot({
coin_history_wanted_2 <- coin_history %>%
filter(Currency == input$crypto_2) %>%
filter(year == input$time_year) %>%
filter(month == input$time_month)
title <- paste0(input$crypto_2, " in ", input$time_month, ", ", input$time_year)
x <- coin_history_wanted_2$day
y <- coin_history_wanted_2$average
p <- ggplot() +
geom_line(mapping = aes(x = x, y = y), color = "green") +
labs(title = title, x = "Date", y = "Exchange Rate") +
theme_solarized()
p
})
output$ets_plot <- renderPlot({
plot(forecast(ETS, h = 10), ylim = c(0,10000))
})
output$holt_plot <- renderPlot({
plot(holtf, ylim = c(0,10000))
})
output$arima_plot <- renderPlot({
plot(forecast(gege, h = 10), ylim = c(0,10000))
})
output$bayesian_plot <- renderPlot({
plot(model1, ylim = c(0,10000))
})
output$szn_analysis <- renderPlot({
plot(szn_analysis)
})
# Change the next four lines based on your own consumer_key, consume_secret, access_token, and access_secret.
consumer_key <- api_consumer_key
consumer_secret <- api_consumer_secret
access_token <- api_access_token
access_secret <- api_access_secret
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
tweets <- reactive({
tw = twitteR::searchTwitter(input$keyword, n=300, lang = "en")
tweets <- twitteR::twListToDF(tw)
tweets <- tweets[,c(1,5,11)]
colnames(tweets) <- c("Tweet", "Date_and_Time", "Screen_Name")
return(tweets)
})
output$plot <- renderPlot({
text <- ""
for (row in 1:300) {
text <- paste(text, tweets()[row,1])
}
data <- Corpus(VectorSource(text))
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
data <- tm_map(data, toSpace, " ' ")
# Convert the text to lower case
data <- tm_map(data, content_transformer(tolower))
# Remove numbers
data <- tm_map(data, removeNumbers)
# Remove english common stopwords
data <- tm_map(data, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
data <- tm_map(data, removeWords, c("RT", "@"))
# Remove punctuations
data <- tm_map(data, removePunctuation)
# Eliminate extra white spaces
data <- tm_map(data, stripWhitespace)
dtm <- TermDocumentMatrix(data)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
for (row in 1:nrow(d)) {
if(grepl("true", d[row,1]) || grepl("false", d[row,1]) || grepl("http", d[row,1]) || grepl("href", d[row,1]) || grepl("twitter", d[row,1]) || grepl("web", d[row,1]) || grepl("client", d[row,1])) {
d <- d[-row,]
}
}
return (wordcloud(words = d$word, freq = d$freq, c(6,.7), min.freq = input$min_freq_slider,
max.words=350, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2")))
})
output$tweets <- DT::renderDataTable({
return(DT::datatable(tweets(), options = list(lengthMenu = c(5, 30, 50, 100), pageLength = 5)))
})
}
# Call the server
shinyServer(server)
runApp()
runApp()
runApp()
runApp()
